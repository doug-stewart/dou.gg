form {
    display: grid;
    gap: calc(var(--spacing) / 2) var(--spacing);
    grid-template-columns: auto 1fr;

    label:where(:has(input, textarea)) {
        display: grid;
        gap: 0 var(--spacing);
        grid-column: 1 / -1;
        grid-template-columns: subgrid;
    }

    button[type='submit'] {
        grid-column: 2;
    }
}

label {
    color: var(--purple-1);
    font-weight: 500;

    span {
        padding-block: 0.72em;
    }
}

input,
textarea {
    background-color: var(--green-1);
    border: unset;
    border-radius: 3px;
    color: var(--green-6);
    font-weight: 400;
    padding-block: 0.72em;
    padding-inline: 0.84em;
}

textarea {
    min-height: 8lh;
    resize: vertical;

    @supports (field-sizing: content) {
        field-sizing: content;
        min-height: 4lh;
        resize: none;
    }
}

label:has(:is(input, textarea):user-invalid),
label ~ :is(input, textarea):user-invalid {
    color: var(--red-2);
}

:is(input, textarea):user-invalid {
    background-color: var(--red-1);
}

.form {
    background-color: color-mix(in srgb, transparent, var(--purple-5) 36%);
    border: 1px solid color-mix(in srgb, transparent, var(--blue-1) 6%);
    border-radius: 3px;
    display: grid;
    gap: var(--spacing);
    grid-template-columns: auto 1fr;
    padding: calc(var(--spacing) * 2);
}

.field {
    display: grid;
    grid-column: 1 / -1;
    grid-template-columns: subgrid;

    &[tabindex='-1'] {
        display: none;
    }

    .error,
    .input,
    .submit {
        grid-column: 2 / -1;
    }
}

.error {
    background-color: var(--red-2);
    border-end-end-radius: 3px;
    border-end-start-radius: 3px;
    color: var(--purple-5);
    font-weight: 300;
    padding-inline: 0.84em;
}

.input:has(+ .error:not(:empty)) {
    border-end-end-radius: 0;
    border-end-start-radius: 0;
}
