---
import type { ImageMetadata } from 'astro';

import { getImage } from 'astro:assets';
import { nanoid } from 'nanoid';

import { environments as environmentsData } from '@/data/environments.json';
import { frameworks as frameworksData } from '@/data/frameworks.json';
import { languages as languagesData } from '@/data/languages.json';
import { software as softwareData } from '@/data/software.json';

const processData = (data: any) =>
    data.map((datum: any) => {
        const { icon, ...rest } = datum;
        return {
            ...rest,
            icon,
            mask: icon ? `/src/assets/images/skills/mono/${icon}.png` : '',
            id: `--${rest.label.toLowerCase().replace(/[^a-z]+/g, '')}-${nanoid(5)}`,
        };
    });

const environments = processData(environmentsData);
const frameworks = processData(frameworksData);
const languages = processData(languagesData);
const software = processData(softwareData);

const pngs = import.meta.glob<{ default: ImageMetadata }>('@/assets/images/skills/mono/*.png');
const optimized = await Promise.allSettled(
    Object.values(pngs).map(async (image) =>
        getImage({ src: image(), format: 'webp', height: 96, width: 96 })
    )
).then((results) =>
    Object.fromEntries(
        Object.keys(pngs).map((key, index) => [
            key,
            results[index].status === 'fulfilled' ? results[index].value.src : '',
        ])
    )
);

const cssCustomProps = [...environments, ...frameworks, ...languages, ...software].reduce(
    (string, { color, icon, mask }) =>
        `${string} --${icon}-mask: url(${optimized[mask]});\n--${icon}-color: ${color};\n`,
    ''
);
---

<style set:text={`:root {${cssCustomProps}}`}></style>

<style>
    @property --_icon-reveal {
        inherits: true;
        initial-value: 0%;
        syntax: '<percentage>';
    }

    .skill {
        --_icon-reveal: 0%;

        background-color: var(--color);
        position: relative;

        &::after {
            background: var(--color)
                radial-gradient(
                    ellipse at 50% 100%,
                    color-mix(in srgb, var(--color), black 24%) 50%,
                    transparent 0%
                )
                no-repeat 50% 100% / 240% calc(var(--_icon-reveal) * 2);
            border-radius: 5px;
            content: '';
            height: calc(100% + 2px);
            inset: -1px;
            position: absolute;
            transition: --_icon-reveal calc(var(--animation-timing) * 1.5)
                var(--animation-curve-out);
            width: calc(100% + 2px);
            z-index: 0;
        }

        &:focus-visible::after,
        &:hover::after {
            --_icon-reveal: 100%;
        }
    }

    .icon {
        aspect-ratio: 1 / 1;
        background-color: var(--color);
        display: block;
        filter: grayscale(1) contrast(1000) invert(1);
        mask-image: var(--mask);
        mask-size: cover;
        position: relative;
        z-index: 1;
    }

    .tooltip {
        background-color: var(--blue-3);
        border-radius: 6px;
        bottom: calc(anchor(top));
        color: var(--green-5);
        display: block;
        filter: drop-shadow(0 max(2px, 0.144em) hsl(0 0% 0% / 0.36));
        font-weight: 600;
        justify-self: anchor-center;
        left: anchor(center);
        margin: calc(var(--spacing));
        opacity: 0;
        padding-block: 0.5em;
        padding-inline: 1em;
        pointer-events: none;
        position: fixed;
        text-align: center;
        transition-delay: 0ms;
        transition-duration: var(--animation-timing);
        transition-property: opacity, translate;
        transition-timing-function: var(--animation-curve-out);
        translate: 0 var(--spacing);
        width: max-content;
        z-index: 1;

        &::after {
            aspect-ratio: 1 / 1;
            background-color: var(--blue-3);
            content: '';
            height: var(--spacing);
            left: 50%;
            position: absolute;
            rotate: 45deg;
            top: 100%;
            translate: -50% -50%;
        }
    }

    .icon:hover + .tooltip {
        opacity: 1;
        transition-delay: var(--animation-timing);
        translate: 0 0;
    }
</style>

<div class="label-group">
    <div class="label-group__set">
        <h3 class="label-group__label">I use</h3>
        <ul class="label-group__list">
            {
                languages.map(({ icon, id, label }: any) => (
                    <li
                        class="label-group__item skill"
                        style={`--mask: var(--${icon}-mask); --color: var(--${icon}-color); anchor-name: ${id}`}
                    >
                        <span class="icon" />
                        <span class="tooltip type--1" style={`position-anchor: ${id}`}>
                            {label}
                        </span>
                    </li>
                ))
            }
        </ul>
    </div>
    <div class="label-group__set">
        <h3 class="label-group__label">along with</h3>
        <ul class="label-group__list">
            {
                frameworks.map(({ icon, id, label }: any) => (
                    <li
                        class="label-group__item skill"
                        style={`--mask: var(--${icon}-mask); --color: var(--${icon}-color); anchor-name: ${id}`}
                    >
                        <span class="icon" />
                        <span class="tooltip type--1" style={`position-anchor: ${id}`}>
                            {label}
                        </span>
                    </li>
                ))
            }
        </ul>
    </div>
    <div class="label-group__set">
        <h3 class="label-group__label">with help from</h3>
        <ul class="label-group__list">
            {
                software.map(({ icon, id, label }: any) => (
                    <li
                        class="label-group__item skill"
                        style={`--mask: var(--${icon}-mask); --color: var(--${icon}-color); anchor-name: ${id}`}
                    >
                        <span class="icon" />
                        <span class="tooltip type--1" style={`position-anchor: ${id}`}>
                            {label}
                        </span>
                    </li>
                ))
            }
        </ul>
    </div>
    <div class="label-group__set">
        <h3 class="label-group__label">on</h3>
        <ul class="label-group__list">
            {
                environments.map(({ icon, id, label }: any) => (
                    <li
                        class="label-group__item skill"
                        style={`--mask: var(--${icon}-mask); --color: var(--${icon}-color); anchor-name: ${id}`}
                    >
                        <span class="icon" />
                        <span class="tooltip type--1" style={`position-anchor: ${id}`}>
                            {label}
                        </span>
                    </li>
                ))
            }
        </ul>
    </div>
    <p class="label-group__note">and other stuff.</p>
</div>
